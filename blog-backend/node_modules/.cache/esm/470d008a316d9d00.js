let Koa,Router,bodyParser,mongoose,api;_316‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_316‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_316‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_316‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_316‍.w("./api",[["default",["api"],function(v){api=v}]]);require('dotenv').config();






// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스를 만듭니다
const { PORT, MONGO_URI } = process.env;

mongoose.connect(MONGO_URI)
    .then(() => {
        console.log('Connected to MongoDB');
        
        const api = require('./api');
        const app = new Koa();
        const router = new Router();

        // 라우터 설정하기
        router.use('/api', api.routes()); // api 라우트 적용

        // 라우터 적용 전에 body-parser 적용하기
        app.use(bodyParser());

        // app 인스턴스에 라우터 적용
        app.use(router.routes()).use(router.allowedMethods());

        // PORT가 지정되어 있지 않다면 4000을 사용합니다.
        const port = PORT || 4000;
        app.listen(port, () => {
            _316‍.g.console.log('Listening on port %d', port);
        });
    })
    .catch(e => {
        _316‍.g.console.log(e);
    });
